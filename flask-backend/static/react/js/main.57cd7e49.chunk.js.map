{"version":3,"sources":["logo.svg","assets/nasa-Q1p7bh3SHj8-unsplash.jpg","assets/netcom-logo.png","assets/1200px-Carnegie_Mellon_University_seal.svg.png","components/HomeScreen.js","history.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","nasa","require","netcom","cmu","JumboWrapper","styled","div","HomeScreen","props","className","style","backgroundImage","backgroundSize","height","Button","variant","flexDirection","opacity","src","paddingLeft","width","createBrowserHistory","App","history","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,2B,wCCA3CD,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,iE,kdCK3C,IAAMC,EAAOC,EAAQ,IACfC,EAASD,EAAQ,IACjBE,EAAMF,EAAQ,IAEdG,GADgBC,IAAOC,IAAV,KACED,IAAOC,IAAV,MA+CHC,EAnCI,SAACC,GAClB,OACE,yBACEC,UAAU,MACVC,MAAO,CACLC,gBAAgB,OAAD,OAASX,EAAT,KACfY,eAAgB,QAChBC,OAAQ,UAGV,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,cACA,kBAACX,EAAD,KACE,6BACE,8DACA,uGAKA,yBAAKM,MAAO,CAAEM,cAAe,WAC3B,yBAAKN,MAAO,CAAEO,QAAS,GAAKC,IAAKhB,IACjC,yBACEQ,MAAO,CAAEO,QAAS,EAAGE,YAAa,IAClCC,MAAM,MACNP,OAAO,MACPK,IAAKf,KAIT,kBAACW,EAAA,EAAD,CAAQC,QAAQ,WAAhB,kB,QC/CKM,gBCcAC,MAVf,WACE,OACE,kBAAC,IAAD,CAAQC,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnB,OCCrBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.57cd7e49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"media/nasa-Q1p7bh3SHj8-unsplash.1d801dd5.jpg\";","module.exports = __webpack_public_path__ + \"media/netcom-logo.cae9d087.png\";","module.exports = __webpack_public_path__ + \"media/1200px-Carnegie_Mellon_University_seal.svg.4e4972d8.png\";","import React, { useState } from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\n\nconst nasa = require(\"../assets/nasa-Q1p7bh3SHj8-unsplash.jpg\");\nconst netcom = require(\"../assets/netcom-logo.png\");\nconst cmu = require(\"../assets/1200px-Carnegie_Mellon_University_seal.svg.png\");\nconst ScreenWrapper = styled.div``;\nconst JumboWrapper = styled.div`\n  top: 30%;\n  /* z-index: 10; */\n  background: lightgrey;\n  border-radius: 25px;\n  border: 1px solid black;\n  height: 50vh;\n  opacity: 0.6;\n  position: absolute;\n  left: 50%;\n  width: 90vh;\n`;\nconst HomeScreen = (props) => {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundImage: `url(${nasa})`,\n        backgroundSize: \"cover\",\n        height: \"100vh\",\n      }}\n    >\n      <Button variant=\"primary\">Learn More</Button>\n      <JumboWrapper>\n        <div>\n          <h1>ASN Malicious Activity Tracker</h1>\n          <h3>\n            Product of sponsorship with Carnegie Mellon University Capstone\n            Program\n          </h3>\n\n          <div style={{ flexDirection: \"column\" }}>\n            <img style={{ opacity: 1 }} src={netcom} />\n            <img\n              style={{ opacity: 1, paddingLeft: 20 }}\n              width=\"160\"\n              height=\"200\"\n              src={cmu}\n            />\n          </div>\n\n          <Button variant=\"primary\">Learn more</Button>\n        </div>\n      </JumboWrapper>\n    </div>\n  );\n};\nexport default HomeScreen;\n","import {createBrowserHistory} from 'history';\n\n\nexport default createBrowserHistory();\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport HomeScreen from \"./components/HomeScreen\";\nimport history from \"./history\";\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/\" exact component={HomeScreen} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}